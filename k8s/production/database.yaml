# FlowEx Database - Production Kubernetes Configuration
# ===================================================
# 
# Production PostgreSQL deployment for FlowEx trading platform
# Created by arkSong (arksong2018@gmail.com)

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: flowex-production
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production
data:
  postgresql.conf: |
    # PostgreSQL Production Configuration for FlowEx
    # ==============================================
    
    # Connection Settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    superuser_reserved_connections = 3
    
    # Memory Settings
    shared_buffers = 2GB
    effective_cache_size = 6GB
    work_mem = 16MB
    maintenance_work_mem = 512MB
    
    # WAL Settings
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 1GB
    checkpoint_completion_target = 0.9
    wal_buffers = 64MB
    
    # Query Planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 1000
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 10MB
    
    # Performance
    shared_preload_libraries = 'pg_stat_statements'
    track_activity_query_size = 2048
    track_functions = all
    
    # Security
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    # =============================================
    
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    
    # "local" is for Unix domain socket connections only
    local   all             all                                     trust
    
    # IPv4 local connections:
    host    all             all             127.0.0.1/32            md5
    
    # IPv6 local connections:
    host    all             all             ::1/128                 md5
    
    # Allow replication connections from localhost, by a user with the
    # replication privilege.
    local   replication     all                                     trust
    host    replication     all             127.0.0.1/32            md5
    host    replication     all             ::1/128                 md5
    
    # FlowEx application connections
    host    flowex          flowex          172.20.0.0/16           md5
    host    flowex          flowex          10.0.0.0/8              md5
    
    # Monitoring connections
    host    postgres        postgres        172.20.0.0/16           md5

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: flowex-production
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "15.5"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: flowex-trading-platform
spec:
  serviceName: postgres-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: production
        app.kubernetes.io/component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      serviceAccountName: flowex-service-account
      priorityClassName: flowex-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: init-permissions
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
      containers:
      - name: postgresql
        image: postgres:15.5-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgresql
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: "flowex"
        - name: POSTGRES_USER
          value: "flowex"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flowex-secrets
              key: postgres-password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        resources:
          requests:
            cpu: 1000m
            memory: 4Gi
          limits:
            cpu: 4000m
            memory: 8Gi
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "flowex" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "flowex" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgres-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      
      # PostgreSQL Exporter for Prometheus
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.15.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          valueFrom:
            secretKeyRef:
              name: flowex-secrets
              key: postgres-exporter-dsn
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: production
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 500Gi

---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: postgres-headless
  namespace: flowex-production
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production

---
# Regular Service for Database Access
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flowex-production
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production
    app.kubernetes.io/component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
    protocol: TCP
  - name: metrics
    port: 9187
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres
  namespace: flowex-production
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: production
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: production
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
